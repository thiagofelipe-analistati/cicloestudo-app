// src/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NOVO: Enum para o status da revisão
enum StatusRevisao {
  PENDENTE
  CONCLUIDA
  ATRASADA
}

model User {
  id          String         @id @default(uuid())
  email       String         @unique
  password    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  disciplinas Disciplina[]
  sessoes     SessaoEstudo[]
  topicos     Topico[]
  ciclos      Ciclo[]
  cicloItens  CicloItem[]
  revisoes    Revisao[] // NOVO: Adiciona relação com revisões
}

model Disciplina {
  id         String         @id @default(uuid())
  nome       String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessoes    SessaoEstudo[]
  topicos    Topico[]
  cicloItens CicloItem[]
}

model Topico {
  id              String         @id @default(uuid())
  nome            String
  urlEstudo       String?
  comentarios     String?
  totalQuestoes   Int            @default(0)
  acertosQuestoes Int            @default(0)
  errosQuestoes   Int            @default(0)
  concluido       Boolean        @default(false) // NOVO: Campo para marcar o tópico como finalizado
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  disciplinaId    String
  userId          String
  sessoes         SessaoEstudo[]
  revisoes        Revisao[] // NOVO: Adiciona relação com revisões
  disciplina      Disciplina     @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NOVO: Modelo completo para as Revisões
model Revisao {
  id           String        @id @default(uuid())
  dataAgendada DateTime
  status       StatusRevisao @default(PENDENTE)
  topicoId     String
  userId       String
  topico       Topico        @relation(fields: [topicoId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SessaoEstudo {
  id              String     @id @default(uuid())
  data            DateTime
  tempoEstudado   Int
  categoria       String
  totalQuestoes   Int?
  acertosQuestoes Int?
  errosQuestoes   Int?
  paginasLidas    Int?
  comentarios     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  disciplinaId    String
  topicoId        String?
  userId          String
  disciplina      Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  topico          Topico?    @relation(fields: [topicoId], references: [id], onDelete: SetNull)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ciclo {
  id                String      @id @default(uuid())
  nome              String
  ordemItemAtual    Int         @default(1)
  conclusoes        Int         @default(0)
  ultimaConclusaoEm DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  itens             CicloItem[]
}

model CicloItem {
  id           String     @id @default(uuid())
  ordem        Int
  tempoMinutos Int
  ciclo        Ciclo      @relation(fields: [cicloId], references: [id], onDelete: Cascade)
  cicloId      String
  disciplina   Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  disciplinaId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
}
